#!/bin/sh

# This is an example init.d script for stopping/starting/reconfiguring tgtd.

TGTD_CONFIG=/pulsarroot/configs/iscsi/targets.conf
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib PATH=$PATH:/usr/local/sbin

TASK=$1

start()
{
        echo "Starting target framework daemon"
        # Start tgtd first.
        /usr/local/sbin/tgtd &>/dev/null
        RETVAL=$?
        if [ "$RETVAL" -ne 0 ] ; then
            echo "Could not start tgtd (is tgtd already running?)"
            exit 1
        fi
        PID=`ps |grep tgt|grep -v grep|tail -n1|awk '{ print $1 }'`
        echo $PID > /var/run/tgtd.pid
        # Put tgtd into "offline" state until all the targets are configured.
        # We don't want initiators to (re)connect and fail the connection
        # if it's not ready.
        /usr/local/sbin/tgtadm --op update --mode sys --name State -v offline
        # Configure the targets.
        /usr/local/sbin/tgt-admin -e -c $TGTD_CONFIG
        # Put tgtd into "ready" state.
        /usr/local/sbin/tgtadm --op update --mode sys --name State -v ready
}

stop()
{
        if [ "$RUNLEVEL" == 0 -o "$RUNLEVEL" == 6 ] ; then
            forcedstop
        fi
        echo "Stopping target framework daemon"
        # Remove all targets. It only removes targets which are not in use.
        /usr/local/sbin/tgt-admin --update ALL -c /dev/null &>/dev/null
        # tgtd will exit if all targets were removed
        /usr/local/sbin/tgtadm --op delete --mode system &>/dev/null
        RETVAL=$?
        if [ "$RETVAL" -eq 107 ] ; then
            echo "tgtd is not running"
            [ "$TASK" != "restart" ] && exit 1
        elif [ "$RETVAL" -ne 0 ] ; then
            echo "Some initiators are still connected - could not stop tgtd"
            exit 2
        fi
        rm /var/run/tgtd.pid
        echo -n
}

forcedstop()
{
        # NOTE: Forced shutdown of the iscsi target may cause data corruption
        # for initiators that are connected.
        echo "Force-stopping target framework daemon"
        # Offline everything first. May be needed if we're rebooting, but
        # expect the initiators to reconnect cleanly when we boot again
        # (i.e. we don't want them to reconnect to a tgtd which is still
        # working, but the target is gone).
        /usr/local/sbin/tgtadm --op update --mode sys --name State -v offline &>/dev/null
        RETVAL=$?
        if [ "$RETVAL" -eq 107 ] ; then
            echo "tgtd is not running"
            [ "$TASK" != "restart" ] && exit 1
        else
            /usr/local/sbin/tgt-admin --offline ALL
            # Remove all targets, even if they are still in use.
            /usr/local/sbin/tgt-admin --update ALL -c /dev/null -f
            # It will shut down tgtd only after all targets were removed.
            /usr/local/sbin/tgtadm --op delete --mode system
            RETVAL=$?
            if [ "$RETVAL" -ne 0 ] ; then
                echo "Failed to shutdown tgtd"
                exit 1
            fi              
        fi
        echo -n
}

reload()
{
        echo "Updating target framework daemon configuration"
        # Update configuration for targets. Only targets which
        # are not in use will be updated.
        /usr/local/sbin/tgt-admin --update ALL -c $TGTD_CONFIG &>/dev/null
        RETVAL=$?
        if [ "$RETVAL" -eq 107 ] ; then
            echo "tgtd is not running"
            exit 1
        fi
}

forcedreload()
{
        echo "Force-updating target framework daemon configuration"
        # Update configuration for targets, even those in use.
        /usr/local/sbin/tgt-admin --update ALL -f -c $TGTD_CONFIG &>/dev/null
        RETVAL=$?
        if [ "$RETVAL" -eq 107 ] ; then
            echo "tgtd is not running"
            exit 1
        fi
}

status()
{
        # Don't name this script "tgtd"...
        TGTD_PROC=$(ps | grep ' tgtd' | grep -v grep|wc -l)
        if [ "$TGTD_PROC" -eq 2 ] ; then
            echo "tgtd is running. Run 'tgt-admin -s' to see detailed target info."
        else
            echo "tgtd is NOT running."
        fi                  
}

case $1 in
        start)
                start
                ;;
        stop)
                stop
                ;;
        forcedstop)
                forcedstop
                ;;
        restart)
                TASK=restart
                stop && start
                ;;
        forcedrestart)
                TASK=restart
                forcedstop && start
                ;;
        reload)
                reload
                ;;
        forcedreload)
                forcedreload
                ;;
        status)
                status
                ;;
        *)
                echo "Usage: $0 {start|stop|forcedstop|restart|forcedrestart|reload|forcedreload|status}"
                exit 2
                ;;
esac